from typing import Dict, List
from .extension_types import SimpleResult, MatchResult

def text_process(process_type: int, text: str) -> str: ...
def reduce_text_process(process_type: int, text: str) -> List[str]: ...

class Matcher:
    def __init__(self, match_table_map_bytes: bytes) -> None: ...
    def __getnewargs__(self) -> bytes: ...
    def __getstate__(self) -> bytes: ...
    def __setstate__(self, match_table_map_bytes: bytes): ...
    def is_match(self, text: str) -> bool: ...
    def process(self, text: str) -> List[MatchResult]: ...
    def word_match(self, text: str) -> Dict[int, List[MatchResult]]: ...
    def word_match_as_string(self, text: str) -> str: ...

class SimpleMatcher:
    def __init__(self, simple_table_bytes: bytes) -> None: ...
    def __getnewargs__(self) -> bytes: ...
    def __getstate__(self) -> bytes: ...
    def __setstate__(self, simple_table_bytes: bytes): ...
    def is_match(self, text: str) -> bool: ...
    def process(self, text: str) -> List[SimpleResult]: ...
