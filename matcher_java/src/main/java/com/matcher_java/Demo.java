package com.matcher_java;

import org.msgpack.core.MessageBufferPacker;
import org.msgpack.core.MessagePack;

import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.Pointer;

import java.io.IOException;

interface Matcher extends Library {
    /**
     * Interface that uses Java Native Access (JNA) to load native shared library functions for matching text.
     *
     * This interface defines methods to initialize matchers, check for text matches, process match results,
     * and clean up resources. The native library is loaded from the path of the shared object file "matcher_c.so".
     *
     * Methods:
     * - init_matcher(byte[] match_table_map_bytes): Initializes a matcher with a given table map in byte array form.
     * - matcher_is_match(Pointer matcher, byte[] text_bytes): Checks if the given text matches the initialized matcher.
     * - matcher_word_match(Pointer matcher, byte[] text_bytes): Processes a match and returns the result as a Pointer.
     * - drop_matcher(Pointer matcher): Releases the resources held by the matcher.
     * - init_simple_matcher(byte[] simple_match_type_word_map_bytes): Initializes a simple matcher with given map bytes.
     * - simple_matcher_is_match(Pointer simple_matcher, byte[] text_bytes): Checks if the given text matches the simple matcher.
     * - simple_matcher_process(Pointer simple_matcher, byte[] text_bytes): Processes a simple match and returns the result.
     * - drop_simple_matcher(Pointer simple_matcher): Releases the resources held by the simple matcher.
     * - drop_string(Pointer ptr): Releases the memory of a string generated by the matcher.
     */

    Matcher INSTANCE = (Matcher) Native.load(
            Matcher.class.getResource("/matcher_c.so").getPath(),
            Matcher.class);

    Pointer init_matcher(byte[] match_table_map_bytes);

    boolean matcher_is_match(Pointer matcher, byte[] text_bytes);

    Pointer matcher_word_match(Pointer matcher, byte[] text_bytes);

    void drop_matcher(Pointer matcher);

    Pointer init_simple_matcher(byte[] simple_match_type_word_map_bytes);

    boolean simple_matcher_is_match(Pointer simple_matcher, byte[] text_bytes);

    Pointer simple_matcher_process(Pointer simple_matcher, byte[] text_bytes);

    void drop_simple_matcher(Pointer simple_matcher);

    void drop_string(Pointer ptr);
}

public class Demo {
    /**
     * Main method to demonstrate the functionality of simple matcher and matcher processes.
     *
     * This method performs the following steps:
     * 1. Prints a message indicating the start of the Simple Matcher Test.
     * 2. Calls the simple_matcher_process_demo() method to demonstrate simple matcher functionality.
     * 3. Prints a separator line.
     * 4. Prints a message indicating the start of the Matcher Test.
     * 5. Calls the matcher_process_demo() method to demonstrate matcher functionality.
     *
     * @param args Command line arguments (not used in this demo).
     * @throws IOException if an I/O error occurs during the demonstration process.
     */
    public static void main(String[] args) throws IOException {
        System.out.println("Simple Matcher Test");
        simple_matcher_process_demo();

        System.out.println("\n");

        System.out.println("Matcher Test");
        matcher_process_demo();
    }

    /**
     * Demonstrates the functionality of the simple matcher process.
     *
     * This method performs the following steps:
     * 1. Initializes a MessagePack buffer packer and packs a map with a single key-value pair.
     * 2. Converts the packed data to a byte array.
     * 3. Uses the Matcher instance to initialize a simple matcher with the byte array.
     * 4. Converts the Chinese string "你好" to a UTF-8 encoded byte array.
     * 5. Checks if the string matches the simple matcher and prints the result.
     * 6. Processes the match and retrieves the result as a Pointer, then converts it to a UTF-8 string and prints it.
     * 7. Releases the memory of the match result string and the simple matcher.
     *
     * @throws IOException if an I/O error occurs during the byte array processing.
     */
    public static void simple_matcher_process_demo() throws IOException {
        // Create a MessagePack buffer packer to pack simple match type word map data
        MessageBufferPacker packer = MessagePack.newDefaultBufferPacker();
        // Pack a map header with one key-value pair
        packer.packMapHeader(1);
        // Pack the integer key 30
        packer.packInt(30);
        // Pack another map header with one key-value pair
        packer.packMapHeader(1);
        // Pack the integer key 1
        packer.packInt(1);
        // Pack the string value "你好" (Hello in Chinese)
        packer.packString("你好");
        // Close the packer to finalize the byte array
        packer.close();

        // Convert the packed data to a byte array
        byte[] simple_match_type_word_map_bytes = packer.toByteArray();

        // Get an instance of the Matcher loaded from the native library
        Matcher instance = Matcher.INSTANCE;

        // Initialize a simple matcher with the packed word map bytes
        Pointer simple_matcher = instance.init_simple_matcher(simple_match_type_word_map_bytes);

        // Convert the Chinese string "你好" to a UTF-8 encoded byte array
        byte[] str_bytes = "你好".getBytes("utf-8");
        // Create a new byte array with an additional null terminator for C strings
        byte[] c_str_bytes = new byte[str_bytes.length + 1];
        // Copy the UTF-8 bytes into the new array
        System.arraycopy(str_bytes, 0, c_str_bytes, 0, str_bytes.length);

        // Check if the string matches the simple matcher
        boolean is_match = instance.simple_matcher_is_match(simple_matcher, c_str_bytes);
        // Print the match result
        System.out.printf("is_match: %s\n", is_match);

        // Process the match and retrieve the result as a Pointer
        Pointer match_res_ptr = instance.simple_matcher_process(simple_matcher, c_str_bytes);
        // Convert the result Pointer to a UTF-8 string
        String match_res = match_res_ptr.getString(0, "utf-8");
        // Print the match result string
        System.out.printf("match_res: %s\n", match_res);

        // Release the memory of the match result string
        instance.drop_string(match_res_ptr);
        // Release the resources held by the simple matcher
        instance.drop_simple_matcher(simple_matcher);
    }

    /**
     * Demonstrates the functionality of the matcher process.
     *
     * This method performs the following steps:
     * 1. Initializes a MessagePack buffer packer and packs a map with various key-value pairs representing a match table.
     * 2. Converts the packed data to a byte array.
     * 3. Uses the Matcher instance to initialize a matcher with the byte array.
     * 4. Converts the Chinese string "你好" to a UTF-8 encoded byte array.
     * 5. Checks if the string matches the matcher and prints the result.
     * 6. Processes the match and retrieves the result as a Pointer, then converts it to a UTF-8 string and prints it.
     * 7. Releases the memory of the match result string and the matcher.
     *
     * @throws IOException if an I/O error occurs during the byte array processing.
     */
    public static void matcher_process_demo() throws IOException {
        // Create a MessagePack buffer packer to pack the match table dictionary data
        MessageBufferPacker packer = MessagePack.newDefaultBufferPacker();

        // Pack a map header with one key-value pair
        packer.packMapHeader(1);
        // Pack the string key "test"
        packer.packString("test");
        // Pack an array header with one item
        packer.packArrayHeader(1);
        // Pack another map header with six key-value pairs
        packer.packMapHeader(6);

        // Pack the string key "table_id" and integer value 1
        packer.packString("table_id");
        packer.packInt(1);
        // Pack the string key "match_table_type" and string value "simple"
        packer.packString("match_table_type");
        packer.packString("simple");
        packer.packString("simple_match_type");
        packer.packInt(30);
        packer.packString("word_list");

        // Pack the string key "word_list" and an array with one string "你好"
        packer.packArrayHeader(1);
        packer.packString("你好");
        packer.packString("exemption_simple_match_type");
        // Pack the string key "exemption_simple_match_type" and integer value 30
        packer.packString("exemption_simple_match_type");
        packer.packInt(30);
        // Pack the string key "exemption_word_list" and an empty array
        packer.packString("exemption_word_list");
        packer.packArrayHeader(0);
        byte[] table_match_dict_bytes = packer.toByteArray();
        // Close the packer to finalize the byte array
        packer.close();

        // Convert the packed data to a byte array

        Matcher instance = Matcher.INSTANCE;
        // Get an instance of the Matcher loaded from the native library

        Pointer matcher = instance.init_matcher(table_match_dict_bytes);
        // Initialize a matcher with the packed match table dictionary bytes

        byte[] str_bytes = "你好".getBytes("utf-8");
        // Convert the Chinese string "你好" to a UTF-8 encoded byte array
        byte[] c_str_bytes = new byte[str_bytes.length + 1];
        // Create a new byte array with an additional null terminator for C strings
        System.arraycopy(str_bytes, 0, c_str_bytes, 0, str_bytes.length);
        // Copy the UTF-8 bytes into the new array

        boolean is_match = instance.matcher_is_match(matcher, c_str_bytes);
        // Check if the string matches the matcher
        System.out.printf("is_match: %s\n", is_match);
        // Print the match result

        Pointer match_res_ptr = instance.matcher_word_match(matcher, c_str_bytes);
        // Process the match and retrieve the result as a Pointer
        String match_res = match_res_ptr.getString(0, "utf-8");
        // Convert the result Pointer to a UTF-8 string
        System.out.printf("match_res: %s\n", match_res);
        // Print the match result string

        instance.drop_string(match_res_ptr);
        // Release the memory of the match result string
        instance.drop_matcher(matcher);
        // Release the resources held by the matcher
    }
}
